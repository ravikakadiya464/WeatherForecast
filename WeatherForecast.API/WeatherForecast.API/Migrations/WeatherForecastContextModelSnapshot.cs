// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherForecast.Domain.Persistence;

#nullable disable

namespace WeatherForecast.API.Migrations
{
    [DbContext(typeof(WeatherForecastContext))]
    partial class WeatherForecastContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeatherForecast.Domain.Entities.Temperature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaxPhrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinPhrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UnitMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95798572-9c5b-4814-810b-23b8fadc82c5"),
                            Unit = "ft",
                            UnitType = 0
                        },
                        new
                        {
                            Id = new Guid("dc659f0a-7177-4b39-9934-7473007ef457"),
                            Unit = "in",
                            UnitType = 1
                        },
                        new
                        {
                            Id = new Guid("802bc95b-e093-4b3a-8f72-a96210ca10ca"),
                            Unit = "mi",
                            UnitType = 2
                        },
                        new
                        {
                            Id = new Guid("bb1a5bcb-3fa7-435c-878b-f8ffb3654704"),
                            Unit = "mm",
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("c08fd973-c7f3-451b-9a1c-4b26df617453"),
                            Unit = "cm",
                            UnitType = 4
                        },
                        new
                        {
                            Id = new Guid("a1f42d11-6d94-40ff-a287-2449733fbd61"),
                            Unit = "m",
                            UnitType = 5
                        },
                        new
                        {
                            Id = new Guid("6847d1d6-602c-42f8-877b-47b853a93091"),
                            Unit = "km",
                            UnitType = 6
                        },
                        new
                        {
                            Id = new Guid("1a5e1135-9722-4567-a1bb-b767e6764b3e"),
                            Unit = "km/h",
                            UnitType = 7
                        },
                        new
                        {
                            Id = new Guid("f8c555b0-a11a-47e5-8ab7-bd79f7b90c80"),
                            Unit = "kt",
                            UnitType = 8
                        },
                        new
                        {
                            Id = new Guid("11cdaa58-b526-46ad-9fe6-efecd7a98faf"),
                            Unit = "mi/h",
                            UnitType = 9
                        },
                        new
                        {
                            Id = new Guid("e60b187d-b32e-43a3-a275-f0534b68b81e"),
                            Unit = "m/s",
                            UnitType = 10
                        },
                        new
                        {
                            Id = new Guid("0322957e-f005-4abd-850a-8e5967f51a9b"),
                            Unit = "hPa",
                            UnitType = 11
                        },
                        new
                        {
                            Id = new Guid("ed75a444-059d-4b01-a4a4-1a0e1fb86034"),
                            Unit = "Hg",
                            UnitType = 12
                        },
                        new
                        {
                            Id = new Guid("1877a605-990f-4d96-b731-b79cf1c46b63"),
                            Unit = "kPa",
                            UnitType = 13
                        },
                        new
                        {
                            Id = new Guid("5a739bb1-02a6-4d0b-b55c-1fc358010d80"),
                            Unit = "mbar",
                            UnitType = 14
                        },
                        new
                        {
                            Id = new Guid("a4034a2b-9e20-4192-b141-dd6f8db3cba3"),
                            Unit = "mmHg",
                            UnitType = 15
                        },
                        new
                        {
                            Id = new Guid("729a9502-394f-47c2-b875-01a5cbe8fd60"),
                            Unit = "psi",
                            UnitType = 16
                        },
                        new
                        {
                            Id = new Guid("de6c3420-df57-4575-95cf-5111474125f5"),
                            Unit = "C",
                            UnitType = 17
                        },
                        new
                        {
                            Id = new Guid("0a94bb0c-51cd-4567-a86d-1a556a7e2fbf"),
                            Unit = "F",
                            UnitType = 18
                        },
                        new
                        {
                            Id = new Guid("8fb77ca5-9d8b-4fc3-bd8f-6bb73496e908"),
                            Unit = "K",
                            UnitType = 19
                        },
                        new
                        {
                            Id = new Guid("0c28d856-226d-4c45-ba2d-4a1d9b6cc8ce"),
                            Unit = "%",
                            UnitType = 20
                        },
                        new
                        {
                            Id = new Guid("4c5a0334-adfb-496e-9ffd-fe2b86503805"),
                            Unit = "f",
                            UnitType = 21
                        },
                        new
                        {
                            Id = new Guid("63ffaf5b-241b-4b0a-8c56-6e01dc615b0d"),
                            Unit = "int",
                            UnitType = 22
                        });
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.WeatherForecast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AirQuality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ForecastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationKey")
                        .HasColumnType("int");

                    b.Property<Guid>("NightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SunRiseTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SunSetTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TemperatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("NightId");

                    b.HasIndex("TemperatureId");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.WeatherForecastDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CloudCover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Icon")
                        .HasColumnType("int");

                    b.Property<string>("IconPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WindSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WindSpeedUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WindSpeedUnitId");

                    b.ToTable("ForecastDetails");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.Temperature", b =>
                {
                    b.HasOne("WeatherForecast.Domain.Entities.UnitOfMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.WeatherForecast", b =>
                {
                    b.HasOne("WeatherForecast.Domain.Entities.WeatherForecastDetail", "Day")
                        .WithMany()
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecast.Domain.Entities.WeatherForecastDetail", "Night")
                        .WithMany()
                        .HasForeignKey("NightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecast.Domain.Entities.Temperature", "Temperature")
                        .WithMany()
                        .HasForeignKey("TemperatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Night");

                    b.Navigation("Temperature");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.WeatherForecastDetail", b =>
                {
                    b.HasOne("WeatherForecast.Domain.Entities.UnitOfMeasure", "WindSpeedUnit")
                        .WithMany()
                        .HasForeignKey("WindSpeedUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WindSpeedUnit");
                });
#pragma warning restore 612, 618
        }
    }
}
